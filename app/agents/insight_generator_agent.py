# In app/agents/insight_generator_agent.py
from pydanticai import Agent, Tool
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional

# Input will be the AnalysisResult from DataAnalysisAgent
from .data_analysis_agent import AnalysisResult as DataAnalysisResult # Alias to avoid confusion

class GeneratedInsight(BaseModel):
    executive_summary: str = Field(..., description="A high-level summary of the findings.")
    key_findings: List[str] = Field(default_factory=list, description="Bulleted list of key findings.")
    recommendations: List[str] = Field(default_factory=list, description="Actionable recommendations based on the insights.")
    data_source_table: str = Field(..., description="The original data source table for context.")

class InsightGeneratorAgent(Agent):
    class Config:
        tools = [
            Tool(name="generate_insights")
        ]
        enable_default_tools = False

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._tools["generate_insights"] = self._mock_generate_insights

    def _mock_generate_insights(self, analysis_result: DataAnalysisResult) -> GeneratedInsight:
        """
        Mock tool to generate insights from analysis results.
        """
        summary_parts = []
        findings = []
        recommendations = []

        source_table = analysis_result.analyzed_table

        if analysis_result.summary_statistics:
            summary_parts.append(f"Analysis of {source_table} shows notable metrics.")
            for key, value in analysis_result.summary_statistics.items():
                findings.append(f"Statistic: {key.replace('_', ' ').capitalize()} - {value}.")

        if analysis_result.trends_identified:
            summary_parts.append("Key trends were observed.")
            findings.extend(analysis_result.trends_identified)
            if any("positive" in trend.lower() for trend in analysis_result.trends_identified):
                recommendations.append("Recommendation: Continue strategies that are driving positive trends.")

        if analysis_result.anomalies_detected:
            summary_parts.append("Certain anomalies require attention.")
            findings.extend(analysis_result.anomalies_detected)
            recommendations.append("Recommendation: Investigate detected anomalies to understand root causes.")

        if analysis_result.forecast:
            summary_parts.append(f"A forecast is available: {analysis_result.forecast}")
            findings.append(f"Forecast: {analysis_result.forecast}")
            if "increase" in analysis_result.forecast.lower():
                recommendations.append("Recommendation: Prepare for potential growth as indicated by the forecast.")

        if not summary_parts:
            executive_summary = f"A standard analysis was performed on {source_table}, but no specific highlights were generated by the mock agent."
        else:
            executive_summary = " ".join(summary_parts)

        if not findings:
            findings.append("No specific findings generated by the mock insight agent.")
        if not recommendations:
            recommendations.append("Standard recommendation: Monitor performance and continue data collection.")

        return GeneratedInsight(
            executive_summary=executive_summary,
            key_findings=findings,
            recommendations=recommendations,
            data_source_table=source_table
        )

    async def run(self, analysis_result: DataAnalysisResult) -> GeneratedInsight:
        """
        Runs the insight generation agent.
        """
        return self._mock_generate_insights(analysis_result)
