# In app/agents/query_interpreter.py
from pydanticai import Agent, Tool
from pydantic import BaseModel, Field
from typing import List, Dict, Any

# Assume mock_db_connector will be in app.db
from app.db.mock_db_connector import mock_fetch_data

class StructuredQuery(BaseModel):
    table: str = Field(..., description="The table to query")
    filters: Dict[str, Any] = Field(default_factory=dict, description="Filters to apply")
    fields: List[str] = Field(default_factory=list, description="Fields to retrieve")

class InterpreterOutput(BaseModel):
    raw_query: str
    structured_query: StructuredQuery = Field(..., description="The structured query generated by the agent")
    fetched_data: List[Dict[str, Any]] = Field(..., description="Data fetched based on the structured query")
    interpretation_summary: str = Field(..., description="Summary of how the query was interpreted")

class QueryInterpreterAgent(Agent):
    class Config:
        tools = [
            Tool(name="interpret_query_and_fetch_data")
        ]
        enable_default_tools = False

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._tools["interpret_query_and_fetch_data"] = self._interpret_and_fetch

    def _interpret_and_fetch(self, user_query: str) -> InterpreterOutput:
        """
        Interprets the user query, generates a structured query, and fetches mock data.
        """
        # Simple keyword-based interpretation
        s_query = StructuredQuery(table="unknown", fields=["*"])
        summary = "Could not determine specific table from query."

        if "sales" in user_query.lower():
            s_query.table = "sales_data"
            s_query.fields = ["date", "product_id", "revenue", "units_sold"]
            if "q2" in user_query.lower():
                s_query.filters = {"quarter": "Q2"}
            summary = "Interpreted as a query for sales data."
        elif "marketing" in user_query.lower():
            s_query.table = "marketing_campaigns"
            s_query.fields = ["campaign_id", "spend", "roi", "start_date"]
            summary = "Interpreted as a query for marketing campaign data."

        # Call mock_fetch_data with the structured query
        data = mock_fetch_data(s_query)

        return InterpreterOutput(
            raw_query=user_query,
            structured_query=s_query,
            fetched_data=data,
            interpretation_summary=summary
        )

    async def run(self, user_query: str) -> InterpreterOutput:
        return self._interpret_and_fetch(user_query)
