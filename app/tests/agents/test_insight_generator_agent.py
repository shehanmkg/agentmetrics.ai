# In app/tests/agents/test_insight_generator_agent.py
import pytest
from app.agents import InsightGeneratorAgent, GeneratedInsight, AnalysisResult

@pytest.mark.asyncio
async def test_insight_generator_agent_with_data():
    agent = InsightGeneratorAgent()
    # Create a sample AnalysisResult
    analysis_input = AnalysisResult(
        analyzed_table="sales_data",
        summary_statistics={"total_revenue": 5800, "average_revenue": 1933.33},
        trends_identified=["Positive sales trend noted."],
        anomalies_detected=["High revenue transaction on 2023-04-05."],
        forecast="Sales expected to grow by 10%."
    )

    actual_output: GeneratedInsight = await agent.run(analysis_input)

    assert actual_output.data_source_table == "sales_data"
    assert "Positive sales trend noted." in actual_output.key_findings
    assert "High revenue transaction on 2023-04-05." in actual_output.key_findings
    assert "Sales expected to grow by 10%." in actual_output.key_findings
    assert len(actual_output.executive_summary) > 0
    assert len(actual_output.recommendations) > 0

@pytest.mark.asyncio
async def test_insight_generator_agent_no_specific_findings():
    agent = InsightGeneratorAgent()
    analysis_input = AnalysisResult(
        analyzed_table="other_data",
        summary_statistics={}, trends_identified=[], anomalies_detected=[], forecast=None
    )

    actual_output: GeneratedInsight = await agent.run(analysis_input)

    assert actual_output.data_source_table == "other_data"
    assert "No specific findings generated by the mock insight agent." in actual_output.key_findings
    assert "Standard recommendation: Monitor performance and continue data collection." in actual_output.recommendations
